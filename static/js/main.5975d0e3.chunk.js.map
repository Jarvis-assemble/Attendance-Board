{"version":3,"sources":["components/Note.jsx","list.js","components/Intro.jsx","components/Admin.jsx","components/App.jsx","index.js"],"names":["createNote","i","React","createElement","Note","key","id","title","props","Entry","setEntry","useState","Items","setItems","itemsArr","count","error","setError","className","type","onChange","event","newVal","target","value","onClick","trim","prev","style","color","map","item","index","list","Intro","Admin","fullName","setfullName","fName","lName","visible","setVisible","handleUpdate","name","placeholder","preventDefault","App","Fragment","class","ReactDOM","render","document","getElementById"],"mappings":"gJAEA,SAASA,EAAWC,GAClB,OACEC,IAAAC,cAACC,EAAI,CACHC,IAAKJ,EAAEK,GACPC,MAAON,EAAEM,QAMf,SAASH,EAAKI,GAEZ,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAAOC,GAAYF,mBACxB,CACEG,SAAS,GACTC,MAAM,KAGHC,EAAOC,GAAYN,mBAAS,IAsBnC,OACET,IAAAC,cAAA,OAAKe,UAAU,aACbhB,IAAAC,cAAA,OAAKe,UAAU,WACbhB,IAAAC,cAAA,UAAKK,EAAMD,OACXL,IAAAC,cAAA,UAAKS,EAAMG,QAEbb,IAAAC,cAAA,OAAKe,UAAU,QACbhB,IAAAC,cAAA,SAAOgB,KAAK,OAAOC,SA3BzB,SAAsBC,GACpB,MAAMC,EAASD,EAAME,OAAOC,MAC5Bd,EAASY,GACTL,EAAS,KAwBsCO,MAAOf,IAClDP,IAAAC,cAAA,UAAQsB,QAtBd,WACuB,KAAjBhB,EAAMiB,QAIVb,EAAUc,IACD,CACLb,SAAU,IAAIa,EAAKb,SAAUL,GAC7BM,MAAOY,EAAKZ,MAAQ,KAGxBL,EAAS,KATPO,EAAS,0BAqBLf,IAAAC,cAAA,YAAM,QAGPa,GAASd,IAAAC,cAAA,KAAGyB,MAAO,CAAEC,MAAO,YAAcb,IAI7Cd,IAAAC,cAAA,WACED,IAAAC,cAAA,UACES,EAAME,SAASgB,IAAI,CAACC,EAAMC,IACxB9B,IAAAC,cAAA,MAAIE,IAAK2B,GAAQD,OClDdE,MAZJ,CACP,CACI3B,GAAG,EACHC,MAAO,WAEX,CACID,GAAG,EACHC,MAAO,WCEA2B,MAPf,WACE,OACEhC,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,sBCyDKgC,MA5Df,WACE,MAAOC,EAAUC,GAAe1B,mBAAS,CACvC2B,MAAO,GACPC,MAAO,MAGFC,EAASC,GAAc9B,oBAAS,GAEvC,SAAS+B,EAAarB,GAIpB,MAAM,MAAEG,EAAK,KAAEmB,GAAStB,EAAME,OAE9Bc,EAAaV,GACE,UAATgB,EAEK,CACLL,MAAOd,EACPe,MAAOZ,EAAKY,OAEI,UAATI,EACF,CACLL,MAAOX,EAAKW,MACZC,MAAOf,QAHJ,GAcX,OACEtB,IAAAC,cAAA,OAAKe,UAAU,UACbhB,IAAAC,cAAA,UAAI,SACKiC,EAASE,MAAM,IAAEF,EAASG,MAAM,KAAGC,GAAS,KAEpDA,GACDtC,IAAAC,cAAA,YACED,IAAAC,cAAA,SACEiB,SAAUsB,EACVC,KAAK,QACLC,YAAY,aACZpB,MAAOY,EAASE,QAElBpC,IAAAC,cAAA,SACEiB,SAAUsB,EACVC,KAAK,QACLC,YAAY,YACZpB,MAAOY,EAASG,QAElBrC,IAAAC,cAAA,UAAQsB,QAxBd,SAAsBJ,GACpBA,EAAMwB,iBACNJ,GAAW,KAsBwB,aCnCxBK,MAbf,WAEI,OACI5C,IAAAC,cAAAD,IAAA6C,SAAA,KACC7C,IAAAC,cAAC+B,EAAK,MACNhC,IAAAC,cAACgC,EAAK,MACPjC,IAAAC,cAAA,OAAK6C,MAAM,SACVf,EAAKH,IAAI9B,M,KCVlBiD,IAASC,OAAOhD,IAAAC,cAAC2C,EAAG,MAAKK,SAASC,eAAe,U","file":"static/js/main.5975d0e3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction createNote(i) {\n  return (\n    <Note\n      key={i.id}\n      title={i.title}\n    />\n  );\n}\n\n\nfunction Note(props) {\n  \n  const [Entry, setEntry] = useState(\"\");\n  const [Items, setItems] = useState(\n    {\n      itemsArr:[],\n      count:0\n    }\n  );\n  const [error, setError] = useState(\"\");\n\n  function handleChange(event) {\n    const newVal = event.target.value;\n    setEntry(newVal);\n    setError(\"\"); // Clear error message when user types\n  }\n\n  function onSave() {\n    if (Entry.trim() === \"\") {\n      setError(\"Item cannot be empty\");\n      return;\n    }\n    setItems((prev) => {\n      return {\n        itemsArr: [...prev.itemsArr, Entry],\n        count: prev.count + 1\n      };\n    });\n    setEntry(\"\");\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"heading\">\n        <h1>{props.title}</h1>\n        <h1>{Items.count}</h1>\n      </div>\n      <div className=\"form\">\n        <input type=\"text\" onChange={handleChange} value={Entry} />\n        <button onClick={onSave}> \n          <span>Add</span>\n        </button>\n      \n        {error && <p style={{ color: \"#c0392b\" }}>{error}</p>}\n\n      </div>\n      \n      <div>\n        <ul>\n         {Items.itemsArr.map((item, index) => (\n            <li key={index}>{item}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Note;\nexport {createNote};","const list=[\n    {\n        id:1,\n        title: \"Present\"\n    },\n    {\n        id:2,\n        title: \"Absent\"\n    }\n\n]\n\nexport default list;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nfunction Intro() {\n  return (\n    <div>\n      <h1>Attendance Board</h1>\n    </div>\n  );\n}\nexport default Intro;","import React, { useState } from \"react\";\n\nfunction Admin() {\n  const [fullName, setfullName] = useState({\n    fName: \"\",\n    lName: \"\",\n  });\n  \n  const [visible, setVisible] = useState(true);\n\n  function handleUpdate(event) {\n    //const inputName = event.target.name; fName, lName\n    //const newValue = event.target.value;\n\n    const { value, name } = event.target;\n\n    setfullName((prev) => {\n      if (name === \"fName\") {\n        //note: Don't access event inside state setter..like if(event.target.name) inside setfullName\n        return {\n          fName: value,\n          lName: prev.lName,\n        };\n      } else if (name === \"lName\") {\n        return {\n          fName: prev.fName,\n          lName: value,\n        };\n      }\n    });\n  }\n\n  function handleVanish(event){\n    event.preventDefault();\n    setVisible(false);\n  }\n\n  return (\n    <div className=\"header\">\n      <h1>\n        Hello {fullName.fName} {fullName.lName} {!visible&&\"!\"}\n      </h1>\n      {visible && (\n      <form>\n        <input\n          onChange={handleUpdate}\n          name=\"fName\"\n          placeholder=\"First Name\"\n          value={fullName.fName}\n        />\n        <input\n          onChange={handleUpdate}\n          name=\"lName\"\n          placeholder=\"Last Name\"\n          value={fullName.lName}\n        />\n        <button onClick={handleVanish}>Submit</button>\n      </form>)}\n    </div>\n  );\n}\n\nexport default Admin;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Note,{createNote} from \"./Note\";\nimport list from \"../list.js\"\nimport Intro from \"./Intro.jsx\";\nimport Admin from \"./Admin.jsx\";\n\n\nfunction App()\n{\n    return (\n        <>\n         <Intro/>\n         <Admin/>\n        <div class=\"board\">\n        {list.map(createNote)}\n        </div>\n        </>\n    );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n//CHALLENGE: Make this app work by applying what you've learnt.\n//1. When new text is written into the input, its state should be saved.\n//2. When the add button is pressed, the current data in the input should be\n//added to an array.\n//3. The <ul> should display all the array items as <li>s\n"],"sourceRoot":""}